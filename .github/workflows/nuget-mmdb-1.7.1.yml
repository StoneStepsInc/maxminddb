#
# The version part is immutable in the name, but the package revision
# component after the dash should be kept in sync with `PKG_REV`.
# GitHub doesn't allow variables in the workflow names, so this cannot
# be automated.
#
# For new MaxMindDB versions, rename this file with a new version name
# to restart build numbers from `1`. This is necessary because GitHub
# maintains build numbers per workflow file name.
#
name: MaxMindDB v1.7.1-1

#
# When `publish-package` is set to `yes`, the workflow will build
# the package and publish it to nuget.org. Otherwise, a package
# will be built as an artifact and may be downloaded via GitHub UI.
#
# Published Nuget package will use the 4th version component as a
# package revision number because Nuget lacks package revision
# support.
#
# Without publishing, a Nuget package will be uploaded as a workflow
# artifact and will be named using a pre-release version, which is
# an unfortunate workaround for a lack of build promotion support
# between GitHub and Nuget. This means that true pre-release packages
# will conflict with CI packages, but for this repository this is
# not an issue that will ever need to be addressed.
#
on:
  workflow_dispatch:
    inputs:
      publish-package:
        description: Publish Nuget Package (yes/no)?
        required: false

#
# For each new MaxMindDB release, change these variables:
#
#   * PKG_VER
#
# For each change in `PKG_VER`, `PKG_REV` must be reset to `1` (one).
#
# Package revision should be incremented by one every time package
# content is changed in any way, such as changing compiler options,
# adding or removing files, changing any text in README files, etc.
#
env:
  PKG_VER: 1.7.1
  PKG_REV: 1
  BUILD_NUMBER: ${{ github.run_number }}

  #
  # GitHub won't allow referencing `env` within this section, which
  # means that in order to reference the source directory we need
  # to concatenate variables in-place (e.g. `libmaxminddb-${{ env.PKG_VER }}`)
  # or to define them in each step where the source directory is
  # referenced.
  #
  MAXMIND_FNAME: libmaxminddb-1.7.1
  MAXMIND_SHA256: e8414f0dedcecbc1f6c31cb65cd81650952ab0677a4d8c49cab603b3b8fb083e

  # for VS Community Edition, replace `Enterprise` with `Community` in the path
  VCVARSALL: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall'

  # Nuget Gallery (www.nuget.org) publish URL
  NUGET_PUB_URL: https://api.nuget.org/v3/index.json

defaults:
  run:
    shell: cmd

jobs:
  build-libmmdb:
    name: Build libmaxminddb
    runs-on: windows-2022
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download libmaxminddb
      run: |
        curl --location --output ${{ env.MAXMIND_FNAME }}.tar.gz https://github.com/maxmind/libmaxminddb/releases/download/${{ env.PKG_VER }}/${{ env.MAXMIND_FNAME }}.tar.gz
        
    - name: Verify libmaxminddb
      run: |
        7z h -scrcSHA256 ${{ env.MAXMIND_FNAME }}.tar.gz | findstr /C:"SHA256 for data" | call devops\check-sha256 "${{ env.MAXMIND_SHA256 }}"

    - name: Extract libmaxminddb
      run: |
        tar -xzf ${{ env.MAXMIND_FNAME }}.tar.gz

    - name: Build x64
      working-directory: ${{ env.MAXMIND_FNAME }}
      run: |
        call ${{ env.VCVARSALL }} x64
        mkdir build\x64
        cmake -S . -B build\x64 -DBUILD_TESTING=OFF -A x64
        cmake --build build\x64 --config Debug
        cmake --build build\x64 --config Release

      # VCVARSALL is invoked only for tools and CMake sets the platform
    - name: Build Win32
      working-directory: ${{ env.MAXMIND_FNAME }}
      run: |
        call ${{ env.VCVARSALL }} x64
        mkdir build\Win32
        cmake -S . -B build\Win32 -DBUILD_TESTING=OFF -A Win32
        cmake --build build\Win32 --config Debug
        cmake --build build\Win32 --config Release

      #
      # Unfortunately, release builds are set up not to generate PDB,
      # which would be helpful in debugging.
      #
    - name: Collect build artifacts
      run: |
        mkdir nuget\licenses\
        copy /Y ${{ env.MAXMIND_FNAME }}\LICENSE. nuget\licenses\

        mkdir nuget\build\native\include\
        copy /Y ${{ env.MAXMIND_FNAME }}\include\*.h nuget\build\native\include\

        mkdir nuget\build\native\lib\x64\Debug
        copy /Y ${{ env.MAXMIND_FNAME }}\build\x64\Debug\maxminddb.lib nuget\build\native\lib\x64\Debug\
        copy /Y ${{ env.MAXMIND_FNAME }}\build\x64\Debug\maxminddb.pdb nuget\build\native\lib\x64\Debug\

        mkdir nuget\build\native\lib\x64\Release
        copy /Y ${{ env.MAXMIND_FNAME }}\build\x64\Release\maxminddb.lib nuget\build\native\lib\x64\Release\

        mkdir nuget\build\native\lib\Win32\Debug
        copy /Y ${{ env.MAXMIND_FNAME }}\build\Win32\Debug\maxminddb.lib nuget\build\native\lib\Win32\Debug\
        copy /Y ${{ env.MAXMIND_FNAME }}\build\Win32\Debug\maxminddb.pdb nuget\build\native\lib\Win32\Debug\

        mkdir nuget\build\native\lib\Win32\Release
        copy /Y ${{ env.MAXMIND_FNAME }}\build\Win32\Release\maxminddb.lib nuget\build\native\lib\Win32\Release\

      # this is an unconventional use of the pre-release version - see README.md
    - name: Make CI Nuget package
      if: ${{ github.event.inputs.publish-package != 'yes' }}
      run: |
        nuget pack nuget\StoneSteps.MaxMindDB.VS2022.Static.nuspec -Suffix "ci.${{ env.BUILD_NUMBER }}" -Version ${{ env.PKG_VER }}.${{ env.PKG_REV }}

    - name: Upload CI Nuget package
      if: ${{ github.event.inputs.publish-package != 'yes' }}
      uses: actions/upload-artifact@v3
      with:
        name: MaxMindDB CI Nuget package
        path: StoneSteps.MaxMindDB.VS2022.Static.${{ env.PKG_VER }}.${{ env.PKG_REV }}-ci.${{ env.BUILD_NUMBER }}.nupkg

      #
      # Use `-Version` explicitly to override the version in the manifest,
      # so we can usurp the 4th version component for the package revision.
      #
    - name: Make Nuget package
      if: ${{ github.event.inputs.publish-package == 'yes' }}
      run: |
        nuget pack nuget\StoneSteps.MaxMindDB.VS2022.Static.nuspec -Version ${{ env.PKG_VER }}.${{ env.PKG_REV }}

    - name: Publish Nuget package
      if: ${{ github.event.inputs.publish-package == 'yes' }}
      run: |
        nuget push StoneSteps.MaxMindDB.VS2022.Static.${{ env.PKG_VER }}.${{ env.PKG_REV }}.nupkg -Source ${{ env.NUGET_PUB_URL }} -ApiKey "${{ secrets.NUGET_API_KEY }}" -NonInteractive
